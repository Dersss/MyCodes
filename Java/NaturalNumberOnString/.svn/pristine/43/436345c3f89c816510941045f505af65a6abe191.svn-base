import static org.junit.Assert.assertEquals;

import org.junit.Test;

import components.naturalnumber.NaturalNumber;
import components.naturalnumber.NaturalNumber1L;

/**
 * JUnit test fixture for {@code NaturalNumber}'s constructors and kernel
 * methods.
 *
 * @author Put your name here
 *
 */
public abstract class NaturalNumberTest {

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @return the new number
     * @ensures constructorTest = 0
     */
    protected abstract NaturalNumber constructorTest();

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @param i
     *            {@code int} to initialize from
     * @return the new number
     * @requires i >= 0
     * @ensures constructorTest = i
     */
    protected abstract NaturalNumber constructorTest(int i);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @param s
     *            {@code String} to initialize from
     * @return the new number
     * @requires there exists n: NATURAL (s = TO_STRING(n))
     * @ensures s = TO_STRING(constructorTest)
     */
    protected abstract NaturalNumber constructorTest(String s);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * implementation under test and returns the result.
     *
     * @param n
     *            {@code NaturalNumber} to initialize from
     * @return the new number
     * @ensures constructorTest = n
     */
    protected abstract NaturalNumber constructorTest(NaturalNumber n);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @return the new number
     * @ensures constructorRef = 0
     */
    protected abstract NaturalNumber constructorRef();

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @param i
     *            {@code int} to initialize from
     * @return the new number
     * @requires i >= 0
     * @ensures constructorRef = i
     */
    protected abstract NaturalNumber constructorRef(int i);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @param s
     *            {@code String} to initialize from
     * @return the new number
     * @requires there exists n: NATURAL (s = TO_STRING(n))
     * @ensures s = TO_STRING(constructorRef)
     */
    protected abstract NaturalNumber constructorRef(String s);

    /**
     * Invokes the appropriate {@code NaturalNumber} constructor for the
     * reference implementation and returns the result.
     *
     * @param n
     *            {@code NaturalNumber} to initialize from
     * @return the new number
     * @ensures constructorRef = n
     */
    protected abstract NaturalNumber constructorRef(NaturalNumber n);

    // TODO - add test cases for four constructors, multiplyBy10, divideBy10, isZero

    /**
     * Test constructor.
     */
    @Test
    public void testConstructor() {
        NaturalNumber n = this.constructorTest();
        NaturalNumber expectedN = this.constructorRef();
        assertEquals(expectedN.toString(), n.toString());
    }

    /**
     * Test constructor with int parameter.
     */
    @Test
    public void testConstructorInt() {
        NaturalNumber n = this.constructorTest(45);
        NaturalNumber expectedN = this.constructorRef(45);
        assertEquals(expectedN, n);
    }

    /**
     * Test constructor with String parameter.
     */
    @Test
    public void testConstructorString() {
        NaturalNumber n = this.constructorTest("45");
        NaturalNumber expectedN = this.constructorRef("45");
        assertEquals(expectedN, n);
    }

    /**
     * Test constructor with NaturalNumber parameter.
     */
    @Test
    public void testConstructorNN() {
        NaturalNumber n = this.constructorTest(new NaturalNumber1L(45));
        NaturalNumber expectedN = this.constructorRef(new NaturalNumber1L(45));
        assertEquals(expectedN, n);
    }

    @Test
    public final void testMultiplyBy10_1() {

        NaturalNumber nn1 = this.constructorTest(10);
        NaturalNumber nn2 = this.constructorRef(100);

        nn1.multiplyBy10(0);

        assertEquals(nn2, nn1);

    }

    /**
     * Test isZero with empty constructor to get true.
     */
    @Test
    public final void testIsZeroEmpty() {
        NaturalNumber n = this.constructorTest();
        NaturalNumber expectedN = this.constructorRef();
        boolean isZero = n.isZero();
        assertEquals(true, isZero);
        assertEquals(expectedN, n);
    }

    /**
     * Test isZero with int parameter [0] to get true.
     */
    @Test
    public final void testIsZeroIntTrue() {
        NaturalNumber n = this.constructorTest(0);
        NaturalNumber expectedN = this.constructorRef(0);
        boolean isZero = n.isZero();
        assertEquals(true, isZero);
        assertEquals(expectedN, n);
    }

    /**
     * Test isZero with int parameter [13] to get false.
     */
    @Test
    public final void testIsZeroIntFalse() {
        NaturalNumber n = this.constructorTest(13);
        NaturalNumber expectedN = this.constructorRef(13);
        boolean isZero = n.isZero();
        assertEquals(false, isZero);
        assertEquals(expectedN, n);
    }

    /**
     * Test isZero with String parameter ["0"] to get true.
     */
    @Test
    public final void testIsZeroStringTrue() {
        NaturalNumber n = this.constructorTest("0");
        NaturalNumber expectedN = this.constructorRef("0");
        boolean isZero = n.isZero();
        assertEquals(true, isZero);
        assertEquals(expectedN, n);
    }

    /**
     * Test isZero with String parameter ["473"] to get false.
     */
    @Test
    public final void testIszeroStringFalse() {
        NaturalNumber n = this.constructorTest("473");
        NaturalNumber expectedN = this.constructorRef("473");
        boolean isZero = n.isZero();
        assertEquals(false, isZero);
        assertEquals(expectedN, n);
    }

    /**
     * Test isZero with NN parameter [0] to get true.
     */
    @Test
    public final void testIsZeroNNTrue() {
        NaturalNumber n = this.constructorTest(new NaturalNumber1L(0));
        NaturalNumber expectedN = this.constructorRef(new NaturalNumber1L(0));
        boolean isZero = n.isZero();
        assertEquals(true, isZero);
        assertEquals(expectedN, n);
    }

    /**
     * Test isZero with NN parameter [65878963] to get false.
     */
    @Test
    public final void testIsZeroNNFalse() {
        NaturalNumber n = this.constructorTest(new NaturalNumber1L(65878963));
        NaturalNumber expectedN = this
                .constructorRef(new NaturalNumber1L(65878963));
        boolean isZero = n.isZero();
        assertEquals(false, isZero);
        assertEquals(expectedN, n);
    }

}
