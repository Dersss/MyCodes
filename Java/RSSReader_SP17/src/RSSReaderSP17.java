import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Andrew Schneider
 *
 */
public final class RSSReaderSP17 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReaderSP17() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int numChild = channel.numberOfChildren();
        int firstChild = getChildElement(channel, "title");
        int firstChildDesc = getChildElement(channel, "description");
        int firstChildLink = getChildElement(channel, "link");
        String test1 = channel.child(firstChild).toString();
        String test2 = channel.child(firstChildDesc).toString();
        String test3 = channel.child(firstChildLink).toString();
        String end1 = "";
        String end2 = "";
        String end3 = "";
        if (test1.contains("<title>")) {
            int first1 = test1.indexOf("<title>");
            String temp = test1.substring(first1);
            temp = temp.replace("<title>", "");
            int second = test1.indexOf("</title>");
            temp = temp.replace("</title>", "");
            end1 += temp;
        }
        if (test2.contains("<description>")) {
            int first2 = test2.indexOf("<description>");
            String temp = test2.substring(first2);
            temp = temp.replace("<description>", "");
            int second = test2.indexOf("</description>");
            temp = temp.replace("</description>", "");
            end2 += temp;
        }
        if (test3.contains("<link>")) {
            int first3 = test3.indexOf("<link>");
            String temp = test3.substring(first3);
            temp = temp.replace("<link>", "");
            int second = test3.indexOf("</link>");
            temp = temp.replace("</link>", "");
            end3 += temp;
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title> " + end1 + " </title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=\"" + end3 + "\"" + ">" + end1 + "</a></h1>");
        out.println("<p>" + end2 + "</p>");
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

        int firstItem = getChildElement(channel, "item");
        int counter = firstItem + 1;

        XMLTree item = channel.child(firstItem);
        processItem(item, out);
        while (counter < numChild) {
            XMLTree next = channel.child(counter);
            processItem(next, out);
            counter++;
        }

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * TODO: fill in body
         */

        boolean end = false;
        int index = 0;
        int toRet = -1;
        while (!end) {
            if (xml.child(index).label() == tag) {
                toRet = index;
                end = true;
            } else {
                index++;
            }
        }
        return toRet;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */

        int firstChild = getChildElement(item, "title");
        int firstChildDesc = getChildElement(item, "description");
        int firstChildLink = getChildElement(item, "link");
        int firstChildDate = getChildElement(item, "pubDate");
        String test1 = item.child(firstChild).toString();
        String test2 = item.child(firstChildDesc).toString();
        String test3 = item.child(firstChildLink).toString();
        String test4 = item.child(firstChildDate).toString();
        String end1 = "";
        String end2 = "";
        String end3 = "";
        String end4 = "";
        if (test1.contains("<title>")) {
            int first1 = test1.indexOf("<title>");
            String temp = test1.substring(first1);
            temp = temp.replace("<title>", "");
            int second = test1.indexOf("</title>");
            temp = temp.replace("</title>", "");
            end1 = temp;
        }
        if (test2.contains("<description>")) {
            int first2 = test2.indexOf("<description>");
            String temp = test2.substring(first2);
            temp = temp.replace("<description>", "");
            int second = test2.indexOf("</description>");
            temp = temp.replace("</description>", "");
            end2 = temp;
        }
        if (test3.contains("<link>")) {
            int first3 = test3.indexOf("<link>");
            String temp = test3.substring(first3);
            temp = temp.replace("<link>", "");
            int second = test3.indexOf("</link>");
            temp = temp.replace("</link>", "");
            end3 += temp;
        }
        if (test4.contains("<pubDate>")) {
            int first4 = test4.indexOf("<pubDate>");
            String temp = test4.substring(first4);
            temp = temp.replace("<pubDate>", "");
            int second = test4.indexOf("</pubDate>");
            temp = temp.replace("</pubDate>", "");
            end4 += temp;
        }
        if (!test4.contains("<pubDate>")) {
            end4 = "No Date Available";
        }
        out.println("<tr>");
        out.println("<td>" + end4 + "</td>");
        out.println("<td><a href=\"" + end3 + "\"" + ">"
                + " No Source Available " + "</a></td>");
        out.println("<td><a href=\"" + end3 + "\"" + ">" + end1 + "</a></td>");

        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * TODO: fill in body
         */
        out.println("Enter a URL: ");
        String url = in.nextLine();

        XMLTree xml = new XMLTree1(url);
        String label = xml.label();
        XMLTree channel = xml.child(0);
        int mainChild = channel.numberOfChildren();
        XMLTree heading = channel.child(1);
        String toStr = channel.toString();
        out.println("Enter file to write to in .html format: ");
        String toRead = in.nextLine();
        SimpleWriter htmlOUT = new SimpleWriter1L(toRead);
        SimpleWriter txtOUT = new SimpleWriter1L("out.txt");
        txtOUT.println(channel);
        String transition = toRead.replace(".html", ".txt");
        SimpleReader inRSS = new SimpleReader1L(transition);
        outputHeader(channel, htmlOUT);
        outputFooter(htmlOUT);

        in.close();
        out.close();
        inRSS.close();
        htmlOUT.close();
        txtOUT.close();
    }

}
