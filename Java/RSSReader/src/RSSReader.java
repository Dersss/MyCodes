import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Andrew Schneider
 * @version 09/15/17
 *
 */

/**
 *
 * http://www.espn.com/espn/rss/nfl/news
 * http://www.clevelandbrowns.com/cda-web/rss-module.htm?tagName=News
 * https://news.yahoo.com/rss
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>.
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * .
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        int title = getChildElement(channel, "title");
        out.println(
                "<title>" + channel.child(title).child(0).label() + "</title");
        out.println("</head>");
        out.println("<body>");
        int linkNum = getChildElement(channel, "link");
        String link = channel.child(linkNum).child(0).label();
        out.println("<h1><b><a href=\"" + link + "\">"
                + channel.child(title).child(0).label() + "</a>" + "</b></h1>");
        int description = getChildElement(channel, "description");
        if (description == -1) {
            out.println("<h3 style = \"color:red;\" >" + "No Description"
                    + "</h3>");
        } else {
            out.println("<h3  style=\"color:red;\" >"
                    + channel.child(description).child(0).label() + "</h3>");
        }
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean end = false;
        int index = 0;
        int toRet = -1;
        while (index < xml.numberOfChildren() && !end) {
            if (xml.child(index).label().equals(tag)) {
                toRet = index;
                end = true;
            } else {
                index++;
            }
        }
        return toRet;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        int date = getChildElement(item, "pubDate");
        int title = getChildElement(item, "title");
        int source = getChildElement(item, "source");
        int link = getChildElement(item, "link");
        if (date == -1) {
            out.println("<td>No Date Available</td>");
        } else {
            out.println("<td>" + item.child(date).child(0).label() + "</td>");
        }

        if (source == -1) {
            out.println("<td>No Source Available</td>");
        } else {
            out.println("<td><a href=\""
                    + item.child(source).attributeValue("url") + "\">"
                    + item.child(source).child(0).label() + "</td>");
        }
        if (title == -1) {
            out.println("<td>No title Available</td>");
        } else {
            out.println("<td><a href=\"" + item.child(link).child(0).label()
                    + "\">" + item.child(title).child(0).label() + "</td>");
        }
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Please enter a URL: ");
        String url = in.nextLine();
        out.println("Please enter a file name to write too including .html: ");
        String fileName = in.nextLine();
        if (!fileName.contains(".html")) {
            fileName += ".html";
        }

        SimpleWriter fileOut = new SimpleWriter1L(fileName);
        XMLTree orig = new XMLTree1(url);
        boolean version = false;
        if (orig.hasAttribute("version")) {
            if (orig.attributeValue("version").equals("2.0")) {
                version = true;
            }
        }
        if (version) {
            XMLTree channel = orig.child(0);
            outputHeader(channel, fileOut);
            int numChild = channel.numberOfChildren();
            int firstItem = getChildElement(channel, "item");
            processItem(channel.child(firstItem), fileOut);
            int counter = firstItem + 1;
            while (counter < numChild) {
                processItem(channel.child(counter), fileOut);
                counter++;
            }
            outputFooter(fileOut);

        } else {
            out.println("Not a valid version of RSS.");
        }

        fileOut.close();
        in.close();
        out.close();
    }

}
